RPS battle system

-Name Ideas-
	-Chromo Shield
	-RPS Sphere
	-Chromo Sphere
	-RPS/RGB
	-Chromo Cycle


-Basic Idea-
	-players play a generalized version of Rock Paper Scissors
	-instead of a discrete choice between rock(1,0,0), paper(0,1,0), and scissors(0,0,1), the player chooses any normalized 3-vector: (r,p,s)
	-The RPS vectors of the two players are compared, and the winner is determined
	-players make their choice of vector by orienting a sphere



-Other Features/Ideas

	-The game is live, rather than turn based-

	-Triggered Attack-
		-each player has a trigger to 'attack', forcing a comparison of RPS vectors
		-each attack "uses up" one panel of the attacking players' sphere
		-if the attack is successful:
			-also destroys one of the other players' panels
			-result of RPS comparison between two panels is added to attacking players' score

	-Joystick/Gamepad Functionality

	-Continuous scoring-
		-points are float-valued, determined by outcome of vector comparison

	-Discrete scoring-
		-points are integer valued, with pre-defined ranges for vector comparison output
		-e.g. 0 points: 0.0-0.5, 1 point: 0.5-0.9, 2 points, 0.9-1.0

	-Target Optimal Point-
		-show the current optimal position (anti-optimal position) with a green (red) dot, surrounded by a green (red) ring
		-the diameter of the ring indicates potential damage strength (small diameter means high damage, max diameter means no damage)
		-this would replace the current 'two points' target painting

	-AI-
		-It would be quite fun to try to write an optimal AI for this game
		-use a simple neural net (~few inputs are coordinates of player for past few steps, seven outputs: up,down,left,right,cw,ccw,brake,
		-perhaps just one hidden layer?
		-this may 'optimize' to: "The only winning move is not to play." (i.e. AI remains on Safe Point)
		-use two neural nets, independently trained and then linked back-to-front. 
			-the 'front-end' neural net reads in the opponent's RGB position, and calculates the optimal countering position (this is easy to calculate by hand)
			-the 'back-end' neural net takes the optimal position and current position and orientation, and outputs button presses (this is harder....)
		-Active Learning AI-
			-for each timestep, compute the 'distance' between the two players
			-for each point, compute the integrated distance (sum of all instantaneous distances). Positive for AI win, negative for PC win
			-after each point replay history of previous point with slighty modified neural net parameters
				-one point is probably too long, need to do evaluation on small chunks of time
				-every n timesteps, replay the past n timesteps and make gradient descent step
				-n must be small enough that AI behavior change would not be 'noticed' by the PC
			-choose replay with most favorable outcome, modify 'live' NN parameters
		-ability to pickle and save AI 'brain' object
			-allows preservation, history logging, reverting
			-allows easy sharing of trained AIs

	-Separate attack/defense-  SAFE ZONES MAKE THIS A BAD IDEA
		-each player controls two independent spheres: one for attack, one for defense
		-points can only be scored by attacking
		-the attacking player's attack vector is compared against the defending player's defense vector
		NEW WAY TO DO IT:
		-attack and defense are determined by the same sphere, but the central reticule is split (left/right) (or top/bottom)
			into an attack reticule and a defense reticule
		-the angular separation between the two could be fixed, or variable, determined by the player directly, or determined by character gear/modifiers
		-....you can still sort of park your defense reticule on the safezone, but it is more challenging to do it while moving your attack reticule

	-angular momentum- DONE
		-the spheres conserve angular momentum
		-players control sphere orientation through application of torque
		-there should probably be some small friction applied
		-also, perhaps a "brake" key, to significantly increase friction

	-Removing The Safe Zone-
		-Choosing an arbitrary, normalized RPS 3-vector, and displaying it on a sphere, there are two 'safe zones' or poles
			-these correspond to R = P = S = +/- 1/sqrt(3)
		-latitude lines on the sphere are lines of constant 'damage potential'
		-the equator is a circle of maximum damage potential
		-therefore, if the players were confined to the equator:
			-they would choose their RPS 3-vector based on their location on the circle (choosing a single angle)
			-all positions have equal 'damage potential'
			-what is the equation that defines the 3-vector space confined to the equator?
		-is it possible to "step up" one dimension?
			-let the players choose an RPS 4-vector, confined to the 'equator' (a 3sphere) of a 4D sphere?
			-this would eliminate the safe zones while keeping the dual-angle "spinning a sphere" mechanic for choosing the RPS vector
			-this would allow separating "attack color" and "defense color"!
			-what does the 'attack' tensor look like for 4D RPS? (half integer values? i.e. no zeros? extra zeros?)




-Potential Applications-
	-GAME: Co-Pilot-
		-A minimalist space dogfight game (could be limited to 1vAI or 1v1), perhaps set in an asteroid field (something like Frontier)
		-The pilot flies the ship, just as in Frontier
		-The co-pilot controls the ships laser frequency and shield frequency using the RPS sphere system
		-Which player should control the laser aiming/trigger? probably the pilot

	-more details:
		-co-pilot controls only one RPS sphere
		-ship lasers fire only straight forward
		-therefore, pilot must aim lasers
		-On the co-pilot HUD (the RPS sphere):
			-numbered targeting dots for each enemy ship in the forward FOV
			-damage dots for each laser currently impacting the shields
			-pilot and copilot must communicate and coordinate which enemy to target next
		-shield spectrum and laser spectrum are identical
		-therefore, you can sit at the safe points and have impervious shield, but your lasers won't do any damage

	-alternatively: 3 crew:
		-pilot (only pilots the ship)
		-gunner (aims the lasers)
		-tuner (tunes the laser and shield frequencies)

	-SIMPLE VERSION:
		-remake asteroids (2D), for two players
		-changes:
			-add in strafing
			-change 'bullet' weapon to beam weapon
			-beam weapon does instant, constant, long-range damage, low DPS (eventually overheats? pulse instead of beam?)
			-beam color and shield color are determined by RPS sphere

	-MINIMAL RPS GAME OF LIFE:
		-all live squares have an RGB color
		-each step, all live squares battle all live neighbors. The sum of the outcomes determines if the square lives or dies
		-each step, all dead squares search pairs of live neighbors for those with 'enough overlap' in their RGB values (i.e. dot product)
			-if so, the dead square becomes live next round, somehow taking RGB colors from both parents
		-alternative: Asexual reproduction
			-at each death, the neighbor that dealt the most damage clones itself to replace the dying square
			-cloning is imperfect, mutations can occur
